# This is a compose file used in docker stack
version: '3.8'
services:
  nodeserver:
    container_name: reviewsAPI
    image: rickyp00/reviews-api:after-cache
    ports:
      - '3000:3000'
    environment:
      - PORT:"${PORT}"
      - MONGODB_URI:"${MONGODB_URI}"
      - REDIS_URL:"${REDIS_URL}"
    depends_on:
      - db
      - redis
    deploy:
      replicas: 3
  nginx:
    image: nginx
    ports:
      - '80:80'
    depends_on:
      - db
      - redis
      - nodeserver
    volumes:
      - .nginx/default.conf:/etc/nginx/conf.d/default.conf
    deploy:
      placement:
        constraints:
          - 'node.role==manager'
  db:
    image: mongo
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME="${MONGODB_USERNAME}"
      - MONGO_INITDB_ROOT_PASSWORD="${MONGODB_URI}"
      - MONGO_INITDB_DATABASE="${MONGO_INITDB_DATABASE}"
    ports:
      - '6379:6379'
    volumes:
      # - /data/db
      - /data/db:/data/db
      # - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    deploy:
      placement:
        constraints:
          - 'node.hostname==worker-A'
  redis:
    image: redis
    container_name: rdb
    ports:
      - '27017:27017'
    volumes:
      - redis_data:/data
    deploy:
      placement:
        constraints:
          - 'node.role==manager'
  # Open source docker-swarm-visualizer service
  visualizersvc:
    # Image of docker-swarm-visualizer app
    image: dockersamples/visualizer
    depends_on:
      - db
      - redis
      - nodeserver
    deploy:
      placement:
        constraints:
          - 'node.role==manager'
    ports:
      - '8080:8080'
    volumes:
      # Bind volumne host to container
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  /data/db:
    external: true
